TODOs
=====

*   多 EXPOSE the FilterMaker class that's INSIDE ``LCDEx.add_callable_filter``?
    It's pretty nice
        (Django has a similar thing but it doesn't do Currying)

*   Using `lcd` with `Django`
    in Examples/Topics -- Complete this

Package name:

*   keep name `lcd`?  rename back to `logging_config_dict` ???
    or something better?
    `logging_config`?       (again)
    `loggingconfig`?

    And, again, perhaps name changes for classes?
        LCDict
        LCDictEx
        LCDictBuilderABC


Examples:

*   Write up a guide to the examples?
    main module, + a brief description of what each does
    Separate file / chapter?  A table (shudder)?


* Todo: document that all are executable (``$ ./blah.py ...``)
   |    and that the mproc examples take a command line arg, -l / --locking,
   |    -n / --nolocking, --help  (case-insensitive,
   |        and that any prefix of 'locking', 'nolocking' will do


*   多多多 Put `examples/` folder inside `lcd/` ???
    (Note, Tending toward NOT doing this.)


IDEAS
======

Feature "requests"
===================

`lcd` does not provide methods for these handler classes:

    logging.handlers.WatchedFileHandler ?
    logging.handlers.TimedRotatingFileHandler ?
    logging.handlers.SocketHandler                  // is this a base class ???
    logging.handlers.DatagramHandler     // is(n't) there a UDP handler too ???
    logging.handlers.NTEventLogHandler
    logging.handlers.MemoryHandler
    logging.handlers.HTTPHandler


LCDEx methods to add them?
    In any case, cite

        https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers

    and document that all those handlers can be created using ``add_handler``
    with the appropriate value of ``class_``

    An example or two of this would be *VERY* informative (use of ``class_`` kwarg)

Locking* versions?
    not sure about MemoryHandler -- inefficient? bad idea?


