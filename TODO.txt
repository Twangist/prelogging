TODOs
=====

*   "minimal" formatter preset should be "msg"
    Todo! BIG GLOBAL CHANGE, touches many many files

*   Docs etc: not "predefined" formatters but "presets" :)

* Examples -- Class Filter, Callable Filter
    Class Filter    that's initialized with some date:
                    using the keyword parameters for initialization

    Callable filter  "    "     "       "         "     "

*   多? EXPOSE the FilterMaker class (INSIDE ``LCDEx.add_callable_filter``)
    It's pretty nice
        (Django has a similar thing but it doesn't do Currying)

*   Using `lcd` with `Django`
    in Examples/Topics
    complete

Package name:

*   keep name `lcd`?  rename back to `logging_config_dict` ???
    or something better?
    `logging_config`?       (again)
    `loggingconfig`?

Examples:

*   Write up a guide to the examples?
    main module, + a brief description of what each does
    Separate file / chapter?  A table (shudder)?


* Todo: document that all are executable (``$ ./blah.py ...``)
   |    and that the mproc examples take a command line arg, -l / --locking,
   |    -n / --nolocking, --help  (case-insensitive,
   |        and that any prefix of 'locking', 'nolocking' will do


*   多多多 Put `examples/` folder inside `lcd/` ???
    (Note, Tending toward NOT doing this.)


IDEAS
======

Initialization order concerns -- Can a package and an app (lets say) that
uses the package *both* use ConfigSettingsDict*?  By default, `logging`'s
dict-based configuration has limitations...

It seems the answer is, Yes, if they both use the disable_existing_loggers param
to .config(); default is None, in which case the setting used is what was passed
to __init__, default False [contra `logging` package, where default is True];
if non-None is passed, its bool value is used.  disable_existing_loggers should
be set to False by packages that want to use this package but also want to play
nicely with other packages and client apps that also use the package (or, more
generally, those that use logging's dict-config).

Feature "requests"
===================

`lcd` does not provide methods for these handler classes:

    logging.handlers.WatchedFileHandler ?
    logging.handlers.TimedRotatingFileHandler ?
    logging.handlers.SocketHandler
    logging.handlers.DatagramHandler
    logging.handlers.NTEventLogHandler
    logging.handlers.MemoryHandler
    logging.handlers.HTTPHandler

LCDEx methods to add them?
    In any case, cite

        https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers

    and document that all those handlers can be created using ``add_handler``
    with the appropriate value of ``class_``

    An example or two of this would be *VERY* informative (use of ``class_`` kwarg)

Locking* versions?
    not sure about MemoryHandler -- inefficient? bad idea?


